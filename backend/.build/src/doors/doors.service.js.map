{
  "version": 3,
  "sources": ["../../../src/doors/doors.service.ts"],
  "sourcesContent": ["import {\n  Injectable,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { DoorModel } from './doors.interface';\n\n@Injectable()\nexport class DoorsService {\n  private doors: Array<DoorModel> = [];\n  public findAll(): Array<DoorModel> {\n    return this.doors;\n  }\n\n  public findOne(id: number): DoorModel {\n    const door: DoorModel = this.doors.find((door) => door.id === id);\n    if (!door) {\n      throw new NotFoundException('Door not found.');\n    }\n    return door;\n  }\n  public create(door: DoorModel): DoorModel {\n    const doorExists: boolean = this.doors.some((item) => item.id === door.id);\n    if (doorExists) {\n      throw new UnprocessableEntityException('Door already exists');\n    }\n    const maxId: number = Math.max(...this.doors.map((door) => door.id), 0);\n    const id: number = maxId + 1;\n\n    const doorPost: DoorModel = {\n      ...door,\n      id,\n    };\n    this.doors.push(doorPost);\n    return doorPost;\n  }\n\n  public delete(id: number): void {\n    const index: number = this.doors.findIndex((door) => door.id === id);\n    if (index === -1) {\n      throw new NotFoundException('Door not found');\n    }\n  }\n\n  public update(id: number, door: DoorModel): DoorModel {\n    const index: number = this.doors.findIndex((door) => door.id === id);\n    if (index === -1) {\n      throw new NotFoundException('Door not found');\n    }\n    const doorExists: boolean = this.doors.some(\n      (doorIterated) => doorIterated.id === door.id,\n    );\n    if (doorExists) {\n      throw new UnprocessableEntityException('Door already exists');\n    }\n\n    const doorPost: DoorModel = {\n      ...door,\n      id,\n    };\n    this.doors[index] = doorPost;\n    return doorPost;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAIO;AAIA,yBAAmB;AAAA,EAAnB,cARP;AASU,iBAA0B;AAAA;AAAA,EAC3B,UAA4B;AACjC,WAAO,KAAK;AAAA;AAAA,EAGP,QAAQ,IAAuB;AACpC,UAAM,OAAkB,KAAK,MAAM,KAAK,CAAC,UAAS,MAAK,OAAO;AAC9D,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,gCAAkB;AAAA;AAE9B,WAAO;AAAA;AAAA,EAEF,OAAO,MAA4B;AACxC,UAAM,aAAsB,KAAK,MAAM,KAAK,CAAC,SAAS,KAAK,OAAO,KAAK;AACvE,QAAI,YAAY;AACd,YAAM,IAAI,2CAA6B;AAAA;AAEzC,UAAM,QAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,CAAC,UAAS,MAAK,KAAK;AACrE,UAAM,KAAa,QAAQ;AAE3B,UAAM,WAAsB,iCACvB,OADuB;AAAA,MAE1B;AAAA;AAEF,SAAK,MAAM,KAAK;AAChB,WAAO;AAAA;AAAA,EAGF,OAAO,IAAkB;AAC9B,UAAM,QAAgB,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,OAAO;AACjE,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,gCAAkB;AAAA;AAAA;AAAA,EAIzB,OAAO,IAAY,MAA4B;AACpD,UAAM,QAAgB,KAAK,MAAM,UAAU,CAAC,UAAS,MAAK,OAAO;AACjE,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,gCAAkB;AAAA;AAE9B,UAAM,aAAsB,KAAK,MAAM,KACrC,CAAC,iBAAiB,aAAa,OAAO,KAAK;AAE7C,QAAI,YAAY;AACd,YAAM,IAAI,2CAA6B;AAAA;AAGzC,UAAM,WAAsB,iCACvB,OADuB;AAAA,MAE1B;AAAA;AAEF,SAAK,MAAM,SAAS;AACpB,WAAO;AAAA;AAAA;AArDJ;AAAA,EADN;AAAA,GACM;",
  "names": []
}
