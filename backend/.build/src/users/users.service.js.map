{
  "version": 3,
  "sources": ["../../../src/users/users.service.ts"],
  "sourcesContent": ["import {\n  Injectable,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { UserModel } from './users.interface';\n\n@Injectable()\nexport class UsersService {\n  private users: Array<UserModel> = [];\n  public findAll(): Array<UserModel> {\n    return this.users;\n  }\n\n  public findOne(id: number): UserModel {\n    const user: UserModel = this.users.find((user) => user.userId === id);\n\n    if (!user) {\n      throw new NotFoundException('User not found.');\n    }\n    return user;\n  }\n\n  public create(user: UserModel) {\n    const nameExists: boolean = this.users.some(\n      (userIterated) => userIterated.name === user.name,\n    );\n    if (nameExists) {\n      throw new UnprocessableEntityException('this user name already exists.');\n    }\n\n    const maxId: number = Math.max(...this.users.map((user) => user.userId));\n    const id: number = maxId + 1;\n\n    const userPost: UserModel = {\n      ...user,\n      userId: id,\n    };\n    this.users.push(userPost);\n    return userPost;\n  }\n\n  public delete(id: number): void {\n    const index: number = this.users.findIndex((user) => user.userId === id);\n\n    if (index === -1) {\n      throw new NotFoundException('User not found.');\n    }\n\n    this.users.splice(index, 1);\n  }\n\n  public update(id: number, user: UserModel): UserModel {\n    const index: number = this.users.findIndex((user) => user.userId === id);\n\n    if (index === -1) {\n      throw new NotFoundException('User not found.');\n    }\n\n    const userExists: boolean = this.users.some(\n      (userIterated) =>\n        userIterated.name === user.name &&\n        userIterated.surname === user.surname,\n    );\n    if (userExists) {\n      throw new UnprocessableEntityException('this user already exists');\n    }\n\n    const userPost: UserModel = {\n      ...user,\n    };\n\n    this.users[index] = userPost;\n\n    return userPost;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,oBAIO;AAIA,yBAAmB;AAAA,EAAnB,cARP;AASU,iBAA0B;AAAA;AAAA,EAC3B,UAA4B;AACjC,WAAO,KAAK;AAAA;AAAA,EAGP,QAAQ,IAAuB;AACpC,UAAM,OAAkB,KAAK,MAAM,KAAK,CAAC,UAAS,MAAK,WAAW;AAElE,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,gCAAkB;AAAA;AAE9B,WAAO;AAAA;AAAA,EAGF,OAAO,MAAiB;AAC7B,UAAM,aAAsB,KAAK,MAAM,KACrC,CAAC,iBAAiB,aAAa,SAAS,KAAK;AAE/C,QAAI,YAAY;AACd,YAAM,IAAI,2CAA6B;AAAA;AAGzC,UAAM,QAAgB,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,CAAC,UAAS,MAAK;AAChE,UAAM,KAAa,QAAQ;AAE3B,UAAM,WAAsB,iCACvB,OADuB;AAAA,MAE1B,QAAQ;AAAA;AAEV,SAAK,MAAM,KAAK;AAChB,WAAO;AAAA;AAAA,EAGF,OAAO,IAAkB;AAC9B,UAAM,QAAgB,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,WAAW;AAErE,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,gCAAkB;AAAA;AAG9B,SAAK,MAAM,OAAO,OAAO;AAAA;AAAA,EAGpB,OAAO,IAAY,MAA4B;AACpD,UAAM,QAAgB,KAAK,MAAM,UAAU,CAAC,UAAS,MAAK,WAAW;AAErE,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,gCAAkB;AAAA;AAG9B,UAAM,aAAsB,KAAK,MAAM,KACrC,CAAC,iBACC,aAAa,SAAS,KAAK,QAC3B,aAAa,YAAY,KAAK;AAElC,QAAI,YAAY;AACd,YAAM,IAAI,2CAA6B;AAAA;AAGzC,UAAM,WAAsB,mBACvB;AAGL,SAAK,MAAM,SAAS;AAEpB,WAAO;AAAA;AAAA;AAlEJ;AAAA,EADN;AAAA,GACM;",
  "names": []
}
